# coding: utf-8

# Install dependencies
# pip3 install requests alerk_pack

import time
import requests
from alerk_pack.message import MessageWrapper, KMessage, MessageContainer, MessageEn
from alerk_pack.crypto import str_to_asym_key

# Keys below can be got from command:
# $ alerk gen_keys

# Keep this key in secret. The key below should never be used in real projects, as it is publicly available here.
priv_key = "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQy8rckxrWkhXZXhIdFgKVEt1QnlCVlByREpEU0UwN2FOUUluWXZmWmpacGFLSFBCWFRzYUR4dFRNNSsxUkk1b0N2YTFLSjRNK3kzMEo1TQpzR21ESldUQTZnRHp3UHRDb3pZNE91ei9VV2g2V2N5Z0c0eVcrSnJvUWhPOUhLdEd3SjBwSThWL3RvallPb1FQCjlPRW1iVXBwa2p4M1RqWE1qYUZMS2pQbHVhUjBsUkxXcmRkN3ZQUmlTYXF3TXRhY1QrMDlyUE92OW1Yb0FCZWgKRkFueUdlT2ZpM3F6NFMzbCtwdDBSZlNZK1NHRm9Xb0ZOak82UjVUZVVnS0J0M1NBbHJ4THJFMXU3NXA1NlNHSwoxVkhscXhVZEIxVklab3RpUzVhU2pqM2lxVzZXZ3o5SElSLy9LaUcydThyN05qTkJpRTBRNW5ja2NCS25nV1dZCm1uOFhTMVRoNHppcm5WUzB1Z0UwTmFWeC82RjlFb1p5NnVTUWcyTTVxcWdOVXpOR21KV1crS3BXZTBOcmpZRHYKd2VDREVGR1Z1aGRNQVRTODVibmNPaHliNVkyRmhPeHdWL3NMc1FtdkdqT3RjaW1VSGtHcG1jdjRBVFFVU3NSSApzQ2d6UTVzWE9ObHl2Q2doRFk3Tk9MTHgvZ3FZbGxFdXZEcDhWU1dENE05L0ZJd3FsYm9rUXgxcE5SR2lUYnV2CnMzcTIzOEkwLzB3Y2J0YTBQbWV5aGFsUFFDSzh4dmhXYnJlZDhQM01QUmFQK2owQnR5a0JGeHhRNEl1cklVenEKQWNuUkdTWnNoWHFJUmFqSVM1ZGRSQy9oSTlaeXo3N0tSNEtPRy9yMjFVVkNxWDRkVVErWlFXZW1kSjdZMkY1MgpVSkZ3QTZaOENhV1kyNll1c3czSzAzNURMdjdkS1FJREFRQUJBb0lDQUJXR1VsQnhRdzdPRU5ZMDduWGFyU2tGCnNZMEJxa2NpOWNNUmh3RkJRSkNJL3J0cmJUU2thMElGL3BFUjZyMHpURGQ0NTg1Nlkrd29JOWVOWUFjb1JpZXIKRlBnL2h1eHR5RUo5dU56WGo5TklCajFkV1dJRDlicGN6a0hCMlNKUnJrMVNpVzVNVlFPSmJBMHQ4NkNQV0d5Rgp6T25EaHh5c05JMXM2ZXl6NTlCNmRtWkRqNGw4SWhwekVBUTVidjZQcDVYbXNsdmtVSUMyb2UrWmc1UDFleVFFClMzbW5vYkhMYTJxWi9WYTVlQnkzZ0YrZE9DZUdweFpXTTVtL3EveE82a1hCeDl6TVdKR2FwZndlOXRPOVh0eW0KV2RXSVNkQjNrU1pWZEhMWmRHRER6bkIzTWxNMXNobis3RDlHVUhEa2kxOTl0NVlLU3MwbElQTC9QNGlwRlpjYwpXbGRieUhBUHU0aDBkUzJSNWwvbEh2VW96VzNCaG9ZVUZvRWV3bGdjay8yOXRKamJPL3NKdEpnRHNlUlFSdWN5CkNra1BUK2NTUG81NVVEU3hYamNQUFE5MlFSSmpMdGVnTFM0MzhSVW5NdVcvL1RJQ2xnbW51VG9mTGtmc0J3WDQKWkZPMXVyc1oyRmFsbnJmUXVXUWgyVm5lb013YW1kUU8wR1lITFZyUzFHNGVNSGFkS0xCV1pvQmlBNEJ6Szd2SgpUTVQzNkExd1cyVnlRbkMzV04yR2U1cVdSNjZSaFJTTTJRcmx3UjlXTElJanZ2Q0JLM25YWHhKNkx6Z3daRGx4CkNNTmtBZTFrV1dtSXE2OURnVmxLVjdVd21qZkJwYXFya3JwTldkTHB1cXBCa01PTFlDNXppaVU1dXlYUExYSnkKNjdaU3lhR3J3MEFpNUtVVVkya1JBb0lCQVFEa3A2SmtqNGZ1NTNYaEwyVG5US21TUnR5YTVueTFpSGJaV1ZXaQpFQnRPQjA1TWZ6azZNVVJFMzZSV0tEZHVsTUFTUWp1U0g4eW9DNGVMSlUyNm11UkV1aWNCemg0dXVEQWg5OW5CCkp2Ym0xV01OQzFHTFJnWTc1NTJ6cDgyclZGZEtubmg4RnJ0UDJ0S2YxQTRQZzFZYWlzMlFVcktoZXZoZTFjVWwKM09NbFRtWjNwbUlGUjdHbnQwSmNNN0lLazRyekE1QjNpRDRBNWIrNHJoazBkVFZMblpsdEVzWTA3WWdBMnBNZQpxSUYwOXlKblpRVUh4MndmQmsyMDVDS3ZYS0J4YUVRMDJ0V0tBd3k2U1pMakhmVWl5cVZsTzBkQXFjZm5yR2ZnCllvZXJJZ1o0cVBkVmhYRmtleHh0K3ZBUWtkeVJRZGpmdE9VdXNtN2pCbnlRWjNKSEFvSUJBUURXOERvem52OFQKLzYxVUlDTGQ4VU1rM3FkMk9jWE0zb21YQ1NMUVgwV0hMRHdTUEhIWm8yeWdCU2QwMmVGZG5ua1cyVWE2VFNmbwp3V1hVT0hSdnNHdU1KR1ZmRTJjb3p0SHI4Uy9vT0Y0M2o0QUJBM2psK01ic25uSTZwQnFLUE96UytjRXViSUltCllWS2FXeVc2WGRjMFgwUEVqR25ZUC91ckVmSDRDd3ZKb3NFdi9jSkptQ01nc1VYaWYrNHA1OFI5YkNTdHNLbUMKZGVhZWNKWUFNZ2NuK3E4QlNVRlRhdzQ4bU04TkRTV1BydHpkcXBzakx5cjdScTk4NnAyUWcrcEdjU2RVdzkyaQpRL3FmTGN4bVUyM01zVVRKTnZXZHErVGkwVjVXSWlBTHZsVG12YXQrU2tGSFJkbXVMU2xUMGhlNUhad1ZCMG9xClRMcm9GRWFEaWYwUEFvSUJBQ1VaOWtXdTdIV2RaUWsyOFg1K2QvMWVOaW1FUUxRTUFvemQ3QUV4Nzl4SFh6TVcKYWFqQm1idzdOYVV0UFdGYURaaG8ydFdwQjBJMUxMY3RSR0dGQklrS1U0MzliZlJTdXF5b1ZOTDhpWStIREYxdgplcm5Ja1BaamJMbGIvd2xQMUNJdGVJdFovT2JHTU9yeU01M2N4N25pejl3ZEx4TDRxeGhvUTJjVFltQUpTcU1iCmdrZ3RDK3lVMWRXMEphMkZwMFFyVGVPM1hhZ3puMXBPRlpUbmQ5QmZNQ2Y4cGVDc3NpYkJVS0htNGFxaTl4Z2oKMGg4akFxNCtEWm5PY3JwVm8wc0RpaDJ4YkhqS2FlUklUK2MrVXlwa0MxWlR1Z29LQW4vYS83ZnZCT2lGeXRzRgpQNnpHekZGcmtIOWYrbGdWOHQ0Mit3UEJqSFo1U1hqWThwbFR6NzBDZ2dFQkFNRHg3MTFObW0rS2NqNzFoamMwCkQvRTJDcUFmcG9lTk1YZ3ExRnkzV1lQSldyZUlHUytrKzZyK1ZYZ1k2cTBPeUdhUmIyTm9SYTQwaGtPbTFpYzQKK0tKYVBjSEdlakZ3ejVMODlPT0NUbG1UOFBWMzkzeUNBWmlCZDh0YWF4U3pNbWtGbUx3aTNnYTBFT0hOZHFYQQovYUhlN3NldXdJbEdqcFgzeXYyK2RMdHg1Zmc5MUw0WjIxYktyQkJ5aFFxTEtxRG9obGlCSVBtaSt2NDUxUDJoCjZ6aWhXWjVPODF4OTJzN2M0ZWsyWndSL2xYZExZbTZJTmc1Uld0RkpEMTZlZkp6MWtMZ1FCNUpWY2RLWTIwYjAKRjduTFhCTkF5ZVhiVytHY3p4R0ZHcjFRQTRrS3RMcnV6NEM2bkhrMXcwYWliM2RXdERsUVRPeUI2cnJSRUtlZQpKRk1DZ2dFQUZnZXNJVnpIekIrT1ZpS2FWdWw1Wll3RFY3cHY3TytYM0daK3AvaG9qRE56WDNYU0ZoN3BONk8wCjhJbzZxVkNlN3NmT3llbG9aSXNyOEZOeHZCem8vRVNSOUM1bVEzUGVDZDg1NEFrWCthRm55M0lTY0RMdnpLZDIKSGZGaHZtaG9XNS92MjQwOUkrRGZ3cXE3MG1YQ0MyZWpPR3UzS2ZtcW5NOElmUTI0ZTIwbDZBNFh4UlIwZ29CNwpSUnpKMHYya0VvaGVxeXRabVJUbTVQY1huSy9YUER3cW5FK0cwd0p1eHpkSEFKSmNuaU1qbjZRR0pmRlBMYTRpCmNFbGx1em1lQ0FjbE5qSU5wNElLWUdpaVJ4U0xrbEh0M0FDcUJIN295a1FNR1dQaDgzQk1jeWd5U3Y4aDRBS1MKaiswRXpSME04MkZ0Yk9hM0hOUGYrUzdhUm1GWHNRPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo="

# This public key must be put into alerk yaml setting file
public_key = "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF2L3F5NUdSMW5zUjdWMHlyZ2NnVgpUNnd5UTBoTk8yalVDSjJMMzJZMmFXaWh6d1YwN0dnOGJVek9mdFVTT2FBcjJ0U2llRFBzdDlDZVRMQnBneVZrCndPb0E4OEQ3UXFNMk9EcnMvMUZvZWxuTW9CdU1sdmlhNkVJVHZSeXJSc0NkS1NQRmY3YUkyRHFFRC9UaEptMUsKYVpJOGQwNDF6STJoU3lvejVibWtkSlVTMXEzWGU3ejBZa21xc0RMV25FL3RQYXp6ci9abDZBQVhvUlFKOGhuagpuNHQ2cytFdDVmcWJkRVgwbVBraGhhRnFCVFl6dWtlVTNsSUNnYmQwZ0phOFM2eE5idSthZWVraGl0VlI1YXNWCkhRZFZTR2FMWWt1V2tvNDk0cWx1bG9NL1J5RWYveW9odHJ2Syt6WXpRWWhORU9aM0pIQVNwNEZsbUpwL0YwdFUKNGVNNHE1MVV0TG9CTkRXbGNmK2hmUktHY3Vya2tJTmpPYXFvRFZNelJwaVZsdmlxVm50RGE0MkE3OEhnZ3hCUgpsYm9YVEFFMHZPVzUzRG9jbStXTmhZVHNjRmY3QzdFSnJ4b3pyWElwbEI1QnFabkwrQUUwRkVyRVI3QW9NME9iCkZ6alpjcndvSVEyT3pUaXk4ZjRLbUpaUkxydzZmRlVsZytEUGZ4U01LcFc2SkVNZGFUVVJvazI3cjdONnR0L0MKTlA5TUhHN1d0RDVuc29XcFQwQWl2TWI0Vm02M25mRDl6RDBXai9vOUFiY3BBUmNjVU9DTHF5Rk02Z0hKMFJrbQpiSVY2aUVXb3lFdVhYVVF2NFNQV2NzKyt5a2VDamh2Njl0VkZRcWwrSFZFUG1VRm5wblNlMk5oZWRsQ1JjQU9tCmZBbWxtTnVtTHJNTnl0TitReTcrM1NrQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo="

# Keep this key in secret. The key below should never be used in real projects, as it is publicly available here.
sign_key = "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRd0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Mwd2dna3BBZ0VBQW9JQ0FRREdiN0M2b1RwN0IwVXMKOHdvR1UrdnF6T0QrRzdad2hwN1pieUFlVHdCUjhid3JMdEZjWUk1WW5iUzd1ZEkvNUkrNUhjS0ZuWlNwZnAvZgpLZ21rZGZVVVJNVDVYTnphc1R3anZaWGJxRlNwYWJQY3ozYzZPQTM3Zi94OG9qN0FuanJLSXp5M05NWUkwKzlFCjhUdGx6QVJDUkhBYXB0Z2lyUDZZbXhzM21QZG5WOEZKNkJhUTBWelJUNnpDMkxIYzVJNUk2eGhjbzhlK05sZnMKb25YWjRUVW9mblYzQnN2aVFSTkk1SytKcnVkYnhtemRlM3FoUDdiZGxNTW9Ka0ZtcUdxcHh1eHR5bWUzdkh5agpDVlJZZXdEWEhLUXE0RDg5R3RneUJTbGhxQ1ozcWYrQ2xNR1grYmNORWtwa2xubERUWUJYQ0pseVlRTHI3VWpKCmlnc1NZdmhBR1doWjJFVWF4QVdJSE96SE5jb0NTYkRPZkRFR1lkTE1hNzVrSDZkZm9YNlBlSjJvem5Cd05hQmgKYVMyVTVKRHkzcHlQVm1YRWkrZEpLMmEvZWlIT3pVbDM4S0IyTlZRazYyMHdkOVFHbWR2ZzFOQVRBOG5jWmFMRQpWTlBjOTJ5S0RHS05USTU0M2hGODBDZjdQZ3N4TlFiNUI4V0p4dDJqbVduRVlrZTBERk5nNmduU0t0Z2V3RzRsCitnOUNQS0hWMmFvaGxFVVZlODFkTnZSZ1VMZjJKK1RTVzNsL0RaRm9VdnhKTWlzVS9XWlJDVXlZYlB2bStEN3YKWmtkU2NSenRkbTBlQ25EbjBZdFFsWEcvMkZ2SUNvc0Y0cUp1dFpocUM1MitqOWVmb1MxTkZWVFBoeVByeCs1UQptTnJwVjVYUnZzZHMrOEFEd0pHQ2l0SW9qVmVtTXdJREFRQUJBb0lDQUNPdUlaRHRQSjZ5aC9XMUhiQlZscTM1CmVOczRFRzNiUnVUQjNueVVwL0lVRFVtV2VYNnF2ZTJoTGNZemUyS1JybVlTdTg5YXJraHJ4RU5VUTdlV25pS3UKMnR3Ym5ucVVNOFFaYXNDOFc3eTZqT1MvU1NqbXUxemxmbmpLazQzKzVZTkRJcit1ZFkxUXprMFBNeWJ5c0RGYQpMTzRkNGU4YVBBMGtscGhBb1B1c0E4MU9OZ0NFSkxSZUp5cEIzSGxqZjFJTk02dzBwczNFNTdwYzIrUDVZcDJOClg0R3ZieW1YbWVnWmRwYkRKRWFVUHk3ejdQRGhpL2Y3cjd1Z1pWSVlKbFd3dHdKbXlvOTNETklqODA2Vmoya2UKZFVaZ1cvNll2UmNCWnBkd3JMb0hqekhqbll1K0V2UCt2ZkdvUE5XbE1kWjBiV0xybnFMZFg2RWRlVEF0SzRYSgorMm5BYUtJVHVNUlRFWGNzdGJzbzQvN3BvWUVkeWJaWUIyTHh3ZmRSS2h4NDlaT2NnVUNjU1BoKzNGVytveXBBCkM3VytVRnI2N0NrbjllaXFMMTFCV3MyZ3lLdGxHS0JZck91T3BEU0FDd2VFak9JUDl5U1BsZlhlWkFUV2h3WHAKcWViaEdxN2g0ZjV4YVBVTUhJVUNrK21QMlM0aFlHV09EWGU3OVBXbW9peTZMelFVQk1HVHBFYkdCUHNRblQwZAoxdldGSjQ3RDByNTRIN1ZaUHFHWngvcm42ckRIQ2pqRmRRTnRrTTRsNkZnUm5Ha0hxTXlpdVlCM1E2M1NtYWhWCmJLbUszaUozZzBOWU93R29PNEVhWjRFREdJTDFOOFhCc3BKVmUwSnI2eit0eFo2Y3pZZzZ2UERuQU44VHR0WUUKbGlvWHV5Wjc0Y2hQajhBYm9HNkJBb0lCQVFEazl2UWRNQ3ZId2czcUZIWlJFOTJ3dU42LzlON1ZkL3dnejRTRgpTZEhXdWVOU1Uzb21lOWJ6VisyWjdMbmNkRXRPUmRjUjVubWhia3BGcXd3NDA0MjY2QkFmSUtoRE9IelNhVFNaCjhnZ2ozSmNtbFUyVzNFRURXODdHZ3RxOWREdXZNSjJMa1N6V3hqLzlFYitPV0dUcHNUeHdDU0J0cHhGdGV3NEkKcTRBa0ZXV0Z2TStZUitmaHNPSDI4b3M1MWU3MG1OMHQwcGJtMHJzRThlVk1uT2J5aU1TKzE4bGk3TktJNEhlbAo5RGc2WEhuc0NEbGhrN1lBOW5zQm1TVjF0YnlBcmd1cWZCbGxwdzV4UldYYWV1Vll2cTUwdmd2bWRDYlBHays0CjQ4UEhQdHp0b0srbGFZb3V5NHgwbzhKc3RRRm5vNDNVNHh1U3VZNWZkYUV5d09PSkFvSUJBUURkM2ZBcGtFWWkKeU1idXcrN3BwUjBuZjZ5enRjQlVWTkNhTzZCUkYxRStUNVlDeW9SM0wrem9aWXZNQlNUVWVaMldkMFI1NU1MRApZeTdHZUcyUHI4UHNmZTRWZlhSUTZhakR2ZG8vTnBCYlBqWU5CcW12MENNbE9HcHM2Q1BqS1pGQ204UVE1clEwCnp5UVNYSHJXYTdFSEwrN3BYQ3hLZVB2ZlphTGFvMHNlSDFJeDBKeFBvbGRjY0pIU2lyUWIwUDNFMDZ1NEJVUWQKQnhqVnc1OGxDbEF5NUdGaUhXL0RiakQrMFJGR1Fic1MxOVRRQVRxaURDa1JrUWdhTk1HZE42NTF1WWhrVHVQWgpib2wrd1ptMFFFVWJvRXdUZkZNM2lIcE1KZGY4QmUrQ0NyQkRaVXpYanRLN205SjdFd3RidDJtNkhNWllSOVJqCk1WMzdPQW41YlFEYkFvSUJBUUNmZU5tQjB1RkxXbjl5Z0JvQVVvUGY2SU5NMDNLNDM3Nzk0MHQ3d25TaXlBbnEKZHpYbXcrNXN3dHM4a0VMTHB6d2tJa1N2dFFVV1NNajJTVEpVQ2hUM0QxYmJOMVc2ckFkVVRlNVRJdDVFakFuQwoxODZZdW9PVm9VWWR3Vm8xQmxYanFVcXh3TVdvT2FDcjFNYkVrQkNKSytiYWFhRHFmcWlHeG1SNTZXbHd1RzVqCmZhUmhmZ09sa0J0eWNuQkNNaDBpdzYyWmtzbURyMWFQRlNRTi9tSmtucG5hQ2xXN3p4SzhQd3RXelFpMHJXQkYKNDF5RDkrdVdOQlpzZ0l3MHRnVzY0bjVCbWZuZWNVSi81a1FRcmZRN29XUEU3L0U5Njd4MEZ2RmI1MWVlMk12cgp2alZZVW0vcU05OTZCZTBPNWVzNmtoSGhLdVV6aG9ZQk90NnhpT054QW9JQkFDNlh4QzdHV0tSSGE5ZUttQ3JDCi9RdGxlWnhINS9zTjBMMERGcGpRLzhQSkxPU3JLUVJxc1NMZzZHblJEcm44VEVia0J5SmVFelM3S0lDUG05cVgKKzlvM1cvOXhXRE1CenVwRWZZZlc2cHZ1eGFVWXFCdis1dEtUTlc1bmxkbkh5ZlNtQjVmUkN6a240eGhrQ1h2cwpJOEl4bzhlb0Rya1pEVFFPQVJSUFJLQXZ6YkFlY2lVYkg2T1BGR0NWdGxzOUdYM3pRZFdrYlhoM0hCVVFQdVNsCmROQXJPL1JCNEUyM1gxeTBCUit2QUIxbDdCQStvZFNVSHkvTU9GcGdoK1IvWkFqZkRMQ2NES2VGMmlRZmZpcm4KY0Z2cjN1NGNwdEU3dlFzdXkxdm0xelNGRUIwbk1lcjIySFNEdGNFWTc4SzBFdVQ5MC8ySUlDY3duOTc1RnNjbAp5QThDZ2dFQkFLM01hQWpTRlNYblNvWXRXWER5RVRkYmF0V1dqZ2JXbzhFb1d0VksvU00yMUJaQXBBc1NjUm9tCnM1ZFNsdXFkZ3RHNjhLWVd3ZE1NcVRlN28xL0I4WXJwS3BqZFdMQXU2M1FGOGkreGtJYkE0d1lTTzVDZUd6VmIKQVN1NkE1STJGS090TnppU2xnT2FqUkdKa2RTclhRVTBLMkdhVVNGdkpMNXhxZ1BWQ3lIMzhzNjdLK1FiTElBcgpncDRnSk5KVldXenZGQ1BUaHR3ZC9aSG5FZXp5Z0ZlWVpTNzI2VGJlUXNSYXlOSEdLNkpkL05hTGJlejQvc2ZqCmgvenJ4SmN3WWZKcGQxWUFBQ0hhbFpPcE9hYjMweXFYdThlYTBLcm9sbzdOUDVud1Y5NGI5cGREVVg4RkJPSFMKajJOaUwvbWd5SWUyY2Jjck9ITlJOZUlmUWtJbyt1RT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo="

# This verify key must be put into alerk yaml setting file
verify_key = "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF4bSt3dXFFNmV3ZEZMUE1LQmxQcgo2c3pnL2h1MmNJYWUyVzhnSGs4QVVmRzhLeTdSWEdDT1dKMjB1N25TUCtTUHVSM0NoWjJVcVg2ZjN5b0pwSFgxCkZFVEUrVnpjMnJFOEk3MlYyNmhVcVdtejNNOTNPamdOKzMvOGZLSSt3SjQ2eWlNOHR6VEdDTlB2UlBFN1pjd0UKUWtSd0dxYllJcXorbUpzYk41ajNaMWZCU2VnV2tORmMwVStzd3RpeDNPU09TT3NZWEtQSHZqWlg3S0oxMmVFMQpLSDUxZHdiTDRrRVRTT1N2aWE3blc4WnMzWHQ2b1QrMjNaVERLQ1pCWnFocXFjYnNiY3BudDd4OG93bFVXSHNBCjF4eWtLdUEvUFJyWU1nVXBZYWdtZDZuL2dwVEJsL20zRFJKS1pKWjVRMDJBVndpWmNtRUM2KzFJeVlvTEVtTDQKUUJsb1dkaEZHc1FGaUJ6c3h6WEtBa213em53eEJtSFN6R3UrWkIrblg2RitqM2lkcU01d2NEV2dZV2t0bE9TUQo4dDZjajFabHhJdm5TU3RtdjNvaHpzMUpkL0NnZGpWVUpPdHRNSGZVQnBuYjROVFFFd1BKM0dXaXhGVFQzUGRzCmlneGlqVXlPZU40UmZOQW4rejRMTVRVRytRZkZpY2JkbzVscHhHSkh0QXhUWU9vSjBpcllIc0J1SmZvUFFqeWgKMWRtcUlaUkZGWHZOWFRiMFlGQzM5aWZrMGx0NWZ3MlJhRkw4U1RJckZQMW1VUWxNbUd6NzV2Zys3MlpIVW5FYwo3WFp0SGdwdzU5R0xVSlZ4djloYnlBcUxCZUtpYnJXWWFndWR2by9YbjZFdFRSVlV6NGNqNjhmdVVKamE2VmVWCjBiN0hiUHZBQThDUmdvclNLSTFYcGpNQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo="

# This is the part of the keys that was generated for **alerk** by the same command:
# $ alerk gen_keys
# The private key and sign key are kept secret. smalk need not alerk private key and alerk sign key at all.
alerk_pub_key = "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUFveW9HRzNlRkZrcGdtN0hWSFpoeQpYSDRYdURrYjZZWDd5VEVlRjJSTmhwUlkzeFFPQlFSR05yTFkyMW1KQnFUeXBmaWxadCt5a0lHM2pDWlNPenk2Ck14aTRXRnYyVngvTmswL1JlRUV2V2FrdTdHM0N4YmtSekRiNDFrdHhHeElLSHV0enlQbFI3UFVhNFJqQ2xUMnkKZVJyMzNYOUJqTmFmWHNiakEvM0tsbjJ0RkowMXR1d2lmTTlWRzBLUVAwUUtvaHpaTm5QTFdadGJCVmRiMDRIWQpmdVZvRGk3QmdRT2kwTS95NVZPcTZRekpUTDU0RGpvbkJaVDZKbFpGOUhUeThNNWJTVTVwUG5wRTk4SUVrVGNlCjRIOFkxT0tJNmxVUlRWS3ozNit3WE5sckgwTGhlOEt5RjNBVGdIWjlVZHg3Z0pOMWVDNHYyZmhoT3VUemJnbnEKTDRBZUNWVVdQSHMwT0xXdTRwMkRVMlRsR0VjakpUM2VLbWlaYm9hRWNOcjlDWE5HamFnNW5aYTUvTlJpaE9QSwpCRmRoUnI3Y2VMVWRoTmFWYmwycFY3M2luTE5KVG5DaXRHWW5FWWlha05jdVBEVkRhOFA3ZzVaL0JYYXBObzJUCnZ0SGpGSmFZanZnRjhtU2xlOFVPc0I5RkVaWnFSNTA1T055Y3ZncXA3NGlCOWkyWm9jNTJ1ZkRpZlpIb25BVU0Kd0hmYkJ5L3BIejBEcU9mUjZnQWVpc2VtaDFCS0tGekU5WW9XS1lyaFptRlZleFlzZEgxaFlKVm9rT2MxY2RITApOMlE0VGZqYzV3STA2WEFXeVBzQzlDUGthYUpHUkxXMjhOOFE3YkU1bVIyNVRDZ2VjN0VTMUZlYjAwdCtBUEZkCkp3bk8zRGI4RlZYeU1TZVNSQW81YU1NQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo="
alerk_verify_key = "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF2MU1QQW9EcFFnem8xbFJFZVFySwppQzNzbnA5TGZiYXhwNGxzTmQyeGUwSlc2TDlOd0cycXhCdVk3V05BTlRTOGEwTTdUR1BBUUs1YXZJcWNXVTFRCjlpOVMvb0NBOFljeUtDRjNSVHpZSVJyeDFoWElLUDFFT0ZhbWhGN2FwWFh1RWNyeFNhQThtUURtMWtiZy9vcG8KV1ZZY1BnTEs4MFNneXgzOVY1UU4rcGEwaFV2S0JCTUNoT1NGSnVUVWhuQ1h0djRka01JblBlMzJiYzNIaFpOZQphdytOV3MyekIvVXpaTHVUajZDbzlSUWtaRlZzd3UvZ3h3UE5FaitsNysrREtpaXYyRG5BQ3Z2ZDRod2tGMmF2CmJlZ2hvNnZIWkMwdE9vTDl4aGZoeWJpbmZpbUdUemcraUNpQkxjazNneFZHMTRrYmFMRE1CdzBVUUpiOTJXemwKN2doajNlWUljbWZMdHplU3M5bEFycU9pdlJrZ2Q2b0NvVWM2N25yWGpBY01KSUZDOUg2b2lnelYwbkFUV09ybApHRVEzMFJWLzBJS1A0aUp0YnR5OU94cHVCUnBVdU92TytlSU9yU1h5WEZRckJRdlliSTY4TnNuLy84ZHUzV0ZvCkdTbTg1LzlHbGZqSXBJWDZDUGkrS3h2MVROQ1pJWWJyenZ5UG5DSVA5NWl0REx5akE2WThiT2FwOTJkN2poS3MKbmh1WGxkRUFZbGRadGVKNkNQaWhsYWlMdzQ2ZUlaZWJjNjNzVlNMNTFFQzhCSTBzeGJqUzdzN3pPRjhxemZIMgpkRXRnaTdPcFplVUZzL1Q5NDVRVEg5UStvTjIrQ3JFM2xrWUYxUkZHSlE3WVF3Z0xqL0lFdE1UNFpmOFhkNlc2Ck91N2xPem5VZ2ZNVlUyQnBKb2gyOWVzQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo="

# Okay, now convert these key to RSAPrivateKey, RSAPublicKey from cryptography.hazmat.primitives.asymmetric.rsa
# str_to_asym_key(..., False) if it is private key and str_to_asym_key(..., True) if it is public key
priv_key = str_to_asym_key(priv_key, False)
public_key = str_to_asym_key(public_key, True)

sign_key = str_to_asym_key(sign_key, False)
verify_key = str_to_asym_key(verify_key, True)

alerk_pub_key = str_to_asym_key(alerk_pub_key, True)
alerk_verify_key = str_to_asym_key(alerk_verify_key, True)


# Define ip, port and entry point of alerk
IP, PORT, ENTRY_POINT = "127.0.0.1", 8000, "/entry"
url = f"http://{IP}:{PORT}{ENTRY_POINT}"


def event_happened():
    import random
    time.sleep(random.randint(0, 5000)/1000)  # wait from 0 to 5 sec
    # Emulation that an event has occurred


def get_example_image() -> bytes:
    from PIL import Image
    import numpy as np
    import io
    image_data = np.zeros((400, 400, 3), dtype=np.uint8)
    image_data[:200, :200] = [255, 0, 0]  # red
    image_data[200:, :200] = [0, 0, 255]  # blue
    image_data[:200, 200:] = [255, 165, 0]  # orange
    image_data[200:, 200:] = [0, 0, 0]  # black
    image = Image.fromarray(image_data)
    byte_io = io.BytesIO()
    image.save(byte_io, format="PNG")
    byte_io.seek(0)
    return byte_io.getvalue()


# Now about MessageWrapper, KMessage, MessageContainer, MessageEn
#
# MessageWrapper is high-level message abstraction that does not contain any cryptography
#
# KMessage is also high-level message abstraction, but it contains cryptography sign of sender. Also, it contains attached files.
#
# MessageContainer is "box" in which an unencrypted message is placed, then they are encrypted. And vice versa.
#
# MessageEn is encrypted message that looks like garbage.


# The main loop, which can be parallelized if needed.
while True:
    event_happened()

    message_wrapper = MessageWrapper(msg_type=MessageWrapper.MSG_TYPE_REPORT, text="Event happened!", is_attachments=True)
    # Set is_attachments=False, if you dont have any attached files.
    # For example there is image, as attached file.
    image_bytes: bytes = get_example_image()

    # It is recommended to encrypt any attaches, if you dont trust telegram. You can also use coding event text. For example:
    # MessageWrapper(..., text="Event code 41", ...)

    raws, one_image = [], ("image_name.png", image_bytes)
    raws.append(one_image)  # Leave raws empty (len=0) if you set MessageWrapper(..., is_attachments=False)

    kmsg = KMessage(text=message_wrapper.to_json(), raws=raws)

    kimg_as_data = kmsg.to_dict(sign_key, verify_key)  # Specify sender sign and verify key

    message_container = MessageContainer(kimg_as_data)  # Put it into container
    encrypted_message_container = message_container.encrypt(alerk_pub_key)  # Specify receiver (alerk) public key, while encrypting

    men: MessageEn = encrypted_message_container.get_data()  # get MessageEn
    men_d = men.to_dict()  # Just a lot of garbage

    response = requests.post(url, json=men_d)
    if response.status_code != 200:
        pass
        print(response.content)
        # Something wrong

    # Here we go again, but reverse

    men_d = response.json()
    men = MessageEn.from_dict(men_d)
    encrypted_message_container = MessageContainer(men)
    message_container = encrypted_message_container.decrypt(priv_key)  # Specify receiver (smalk) private key, while decrypting

    kimg_as_data = message_container.get_data()

    kmsg = KMessage.from_dict(kimg_as_data, alerk_verify_key)  # Specify sender verify key

    raws = kmsg.get_raws()
    json_text = kmsg.get_text()

    message_wrapper = MessageWrapper.from_json(json_text)

    if message_wrapper.get_type() == MessageWrapper.MSG_TYPE_OK:  # If all is ok (event delivered), you must get type MSG_TYPE_OK
        pass
        # All is ok, you can do next loop
    elif message_wrapper.get_type() == MessageWrapper.MSG_TYPE_ERROR: # Error happened
        pass
        # Do something. For example wait for few and try again
